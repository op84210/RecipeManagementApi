name: CI/CD Pipeline

# 觸發條件
on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

# 環境變數
env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './RecipeManagementApi.csproj'

jobs:
  # 🧪 測試階段
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: 🔨 Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release

    - name: 🧪 Run unit tests
      run: dotnet test ${{ env.PROJECT_PATH }} --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 🐳 Docker 建置階段
  build-docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/recipe-management-api:latest
          ${{ secrets.DOCKER_USERNAME }}/recipe-management-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 部署到 Railway
  deploy-railway:
    name: 🚀 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚂 Deploy to Railway
      uses: railwayapp/railway-deploy@v1
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: recipe-management-api

  # 🔍 程式碼品質檢查
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Install dotnet tools
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: 🔍 Run SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin /k:"recipe-management-api" /o:"your-org" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build ${{ env.PROJECT_PATH }}
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # 🛡️ 安全掃描
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🛡️ Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive
        dotnet list package --deprecated

    - name: 🐳 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/recipe-management-api:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 📈 效能測試
  performance:
    name: 📈 Performance Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🏃‍♂️ Run performance tests
      run: |
        dotnet run --project ${{ env.PROJECT_PATH }} &
        sleep 30
        # 使用 wrk 或 k6 進行負載測試
        echo "Performance testing would run here"

  # 📧 通知
  notify:
    name: 📧 Notify
    runs-on: ubuntu-latest
    needs: [test, build-docker, deploy-railway]
    if: always()
    
    steps:
    - name: 📧 Send Slack notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
